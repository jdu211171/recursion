// Unified Prisma schema for auth service
// Synchronized with business-logic and file-storage services

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Seed configuration
// Run with: bun prisma db seed
// Or use package.json scripts: bun run seed, seed:small, seed:medium, seed:large

// ==================== CORE ENTITIES ====================

model Organization {
  id               Int        @id @default(autoincrement())
  name             String     @db.VarChar(255)
  configVersion    Int        @default(1) @map("config_version")
  deploymentType   String     @default("shared") @map("deployment_type") // 'shared', 'dedicated', 'self-hosted'
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @default(now()) @map("updated_at")
  
  instances        Instance[]
  users            User[]
  categories       Category[]
  items            Item[]
  lendings         Lending[]
  reservations     Reservation[]
  blacklists       Blacklist[]
  files            FileMetadata[]
  configurations   OrgConfiguration[]
  customFields     CustomFieldDefinition[]
  auditLogs        CustomizationAuditLog[]
  userActivityLogs UserActivityLog[]
  lendingPolicies  LendingPolicy[]
  notifications    SystemNotification[]
  emailQueues      EmailQueue[]
  backgroundJobs   BackgroundJob[]
  approvalWorkflows ApprovalWorkflow[]
  apiKeys          ApiKey[]
  feedback         UserFeedback[]

  @@map("organizations")
}

model Instance {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  orgId          Int          @map("org_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")
  
  organization   Organization @relation(fields: [orgId], references: [id])
  users          User[]
  categories     Category[]
  items          Item[]
  lendings       Lending[]
  reservations   Reservation[]
  blacklists     Blacklist[]
  files          FileMetadata[]
  configurations OrgConfiguration[]
  lendingPolicies LendingPolicy[]
  notifications   SystemNotification[]
  emailQueues     EmailQueue[]
  feedback        UserFeedback[]

  @@index([orgId])
  @@map("instances")
}

// ==================== USER & AUTH ENTITIES ====================

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  password       String
  firstName      String?      @map("first_name")
  lastName       String?      @map("last_name")
  contactInfo    String?      @map("contact_info")
  role           UserRole     @default(BORROWER)
  orgId          Int          @map("org_id")
  instanceId     Int?         @map("instance_id")
  isActive       Boolean      @default(true) @map("is_active")
  lastLoginAt    DateTime?    @map("last_login_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  
  organization    Organization @relation(fields: [orgId], references: [id])
  instance        Instance?    @relation(fields: [instanceId], references: [id])
  refreshTokens   RefreshToken[]
  lendings        Lending[]
  reservations    Reservation[]
  blacklists      Blacklist[]
  files           FileMetadata[]
  sessions        UserSession[]
  passwordResets  PasswordResetToken[]
  activityLogs    UserActivityLog[]
  auditLogs       CustomizationAuditLog[]
  preferences     UserPreference?
  notifications   SystemNotification[]
  approvalRequestsSubmitted ApprovalWorkflow[] @relation("ApprovalRequester")
  approvalRequestsToReview  ApprovalWorkflow[] @relation("ApprovalApprover")
  itemHistories   ItemHistory[]
  apiKeys         ApiKey[]
  feedback        UserFeedback[]

  @@index([email])
  @@index([orgId, instanceId])
  @@map("users")
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique @db.Text
  userId      String   @map("user_id")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

model UserSession {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  token       String   @unique
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("user_sessions")
}

model PasswordResetToken {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  token       String   @unique
  expiresAt   DateTime @map("expires_at")
  usedAt      DateTime? @map("used_at")
  createdAt   DateTime @default(now()) @map("created_at")
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("password_reset_tokens")
}

model UserPreference {
  id                String   @id @default(uuid())
  userId            String   @unique @map("user_id")
  emailNotifications Boolean @default(true) @map("email_notifications")
  smsNotifications  Boolean  @default(false) @map("sms_notifications")
  theme             String   @default("light")
  language          String   @default("en")
  timezone          String   @default("UTC")
  metadata          Json?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model ApiKey {
  id          String    @id @default(uuid())
  name        String
  key         String    @unique
  userId      String    @map("user_id")
  orgId       Int       @map("org_id")
  permissions Json      // Array of allowed endpoints/actions
  expiresAt   DateTime? @map("expires_at")
  lastUsedAt  DateTime? @map("last_used_at")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  user        User      @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])

  @@index([key])
  @@index([userId])
  @@map("api_keys")
}

// ==================== BUSINESS ENTITIES ====================

model Category {
  id             String   @id @default(uuid())
  name           String
  description    String?
  orgId          Int      @map("org_id")
  instanceId     Int?     @map("instance_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  organization   Organization @relation(fields: [orgId], references: [id])
  instance       Instance?    @relation(fields: [instanceId], references: [id])
  items          Item[]

  @@unique([name, orgId, instanceId])
  @@index([orgId, instanceId])
  @@map("categories")
}

model Item {
  id             String   @id @default(uuid())
  uniqueId       String   @unique @map("unique_id")
  name           String
  description    String?
  categoryId     String?  @map("category_id")
  orgId          Int      @map("org_id")
  instanceId     Int?     @map("instance_id")
  totalCount     Int      @default(1) @map("total_count")
  availableCount Int      @default(1) @map("available_count")
  metadata       Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  organization   Organization @relation(fields: [orgId], references: [id])
  instance       Instance?    @relation(fields: [instanceId], references: [id])
  category       Category?    @relation(fields: [categoryId], references: [id])
  lendings       Lending[]
  reservations   Reservation[]
  files          FileMetadata[]
  histories      ItemHistory[]
  approvalWorkflows ApprovalWorkflow[]

  @@index([orgId, instanceId])
  @@index([categoryId])
  @@index([uniqueId])
  @@index([orgId, instanceId, availableCount])
  @@map("items")
}

model Lending {
  id               String    @id @default(uuid())
  itemId           String    @map("item_id")
  userId           String    @map("user_id")
  orgId            Int       @map("org_id")
  instanceId       Int?      @map("instance_id")
  borrowedAt       DateTime  @default(now()) @map("borrowed_at")
  dueDate          DateTime  @map("due_date")
  returnedAt       DateTime? @map("returned_at")
  penalty          Float?    @default(0)
  penaltyReason    String?   @map("penalty_reason")
  penaltyOverride  Boolean   @default(false) @map("penalty_override")
  notes            String?
  metadata         Json?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  item             Item      @relation(fields: [itemId], references: [id])
  user             User      @relation(fields: [userId], references: [id])
  organization     Organization @relation(fields: [orgId], references: [id])
  instance         Instance?    @relation(fields: [instanceId], references: [id])

  @@index([itemId])
  @@index([userId])
  @@index([orgId, instanceId])
  @@index([returnedAt])
  @@map("lendings")
}

model Reservation {
  id               String    @id @default(uuid())
  itemId           String    @map("item_id")
  userId           String    @map("user_id")
  orgId            Int       @map("org_id")
  instanceId       Int?      @map("instance_id")
  reservedFor      DateTime  @map("reserved_for")
  expiresAt        DateTime  @map("expires_at")
  status           ReservationStatus @default(ACTIVE)
  fulfilledAt      DateTime? @map("fulfilled_at")
  cancelledAt      DateTime? @map("cancelled_at")
  notes            String?
  metadata         Json?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  item             Item      @relation(fields: [itemId], references: [id])
  user             User      @relation(fields: [userId], references: [id])
  organization     Organization @relation(fields: [orgId], references: [id])
  instance         Instance?    @relation(fields: [instanceId], references: [id])

  @@index([itemId])
  @@index([userId])
  @@index([orgId, instanceId])
  @@index([status])
  @@index([reservedFor])
  @@map("reservations")
}

model Blacklist {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  orgId            Int       @map("org_id")
  instanceId       Int?      @map("instance_id")
  reason           String
  blockedUntil     DateTime  @map("blocked_until")
  isActive         Boolean   @default(true) @map("is_active")
  overriddenBy     String?   @map("overridden_by")
  overriddenAt     DateTime? @map("overridden_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  user             User      @relation(fields: [userId], references: [id])
  organization     Organization @relation(fields: [orgId], references: [id])
  instance         Instance?    @relation(fields: [instanceId], references: [id])

  @@index([userId, orgId, instanceId])
  @@index([blockedUntil])
  @@index([isActive])
  @@map("blacklists")
}

// ==================== CONFIGURATION ENTITIES ====================

model OrgConfiguration {
  id                      String   @id @default(uuid())
  orgId                   Int      @map("org_id")
  instanceId              Int?     @map("instance_id")
  maxLendingDays          Int      @default(7) @map("max_lending_days")
  latePenaltyPerDay       Float    @default(1.00) @map("late_penalty_per_day")
  maxItemsPerUser         Int      @default(5) @map("max_items_per_user")
  requireApproval         Boolean  @default(false) @map("require_approval")
  allowExtensions         Boolean  @default(true) @map("allow_extensions")
  maxExtensions           Int      @default(2) @map("max_extensions")
  autoBlacklist           Boolean  @default(true) @map("auto_blacklist")
  blacklistThresholdFirst Int      @default(3) @map("blacklist_threshold_first")
  blacklistThresholdSecond Int     @default(7) @map("blacklist_threshold_second")
  blacklistThresholdThird Int      @default(30) @map("blacklist_threshold_third")
  themeConfig             Json     @default("{}") @map("theme_config")
  enabledFeatures         Json     @default("[]") @map("enabled_features")
  customFields            Json     @default("{}") @map("custom_fields")
  emailTemplates          Json     @default("{}") @map("email_templates")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  organization            Organization @relation(fields: [orgId], references: [id])
  instance                Instance?    @relation(fields: [instanceId], references: [id])

  @@unique([orgId, instanceId])
  @@index([orgId, instanceId])
  @@map("org_configurations")
}

model FeatureFlag {
  id              String   @id @default(uuid())
  name            String   @unique @db.VarChar(100)
  description     String?
  defaultEnabled  Boolean  @default(false) @map("default_enabled")
  requiresRole    UserRole? @map("requires_role")
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("feature_flags")
}

model CustomFieldDefinition {
  id              String   @id @default(uuid())
  orgId           Int      @map("org_id")
  entityType      String   @db.VarChar(50) @map("entity_type") // 'item', 'user', 'lending', etc.
  fieldName       String   @db.VarChar(100) @map("field_name")
  fieldType       String   @db.VarChar(50) @map("field_type") // 'text', 'number', 'date', 'select', 'checkbox'
  fieldConfig     Json     @map("field_config") // Options for select, validation rules, etc.
  isRequired      Boolean  @default(false) @map("is_required")
  displayOrder    Int      @default(0) @map("display_order")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  organization    Organization @relation(fields: [orgId], references: [id])

  @@unique([orgId, entityType, fieldName])
  @@index([orgId, entityType])
  @@map("custom_field_definitions")
}

model LendingPolicy {
  id                String   @id @default(uuid())
  orgId             Int      @map("org_id")
  instanceId        Int?     @map("instance_id")
  name              String
  description       String?
  itemCategory      String?  @map("item_category")
  userRole          UserRole? @map("user_role")
  maxDays           Int      @map("max_days")
  maxItems          Int      @map("max_items")
  requiresApproval  Boolean  @default(false) @map("requires_approval")
  penaltyRules      Json     @map("penalty_rules") // Complex penalty calculation rules
  priority          Int      @default(0) // Higher priority policies override lower ones
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  organization      Organization @relation(fields: [orgId], references: [id])
  instance          Instance?    @relation(fields: [instanceId], references: [id])

  @@index([orgId, instanceId])
  @@index([priority])
  @@map("lending_policies")
}

// ==================== AUDIT & LOGGING ENTITIES ====================

model CustomizationAuditLog {
  id              String   @id @default(uuid())
  orgId           Int      @map("org_id")
  userId          String?  @map("user_id")
  action          String   @db.VarChar(100)
  entityType      String   @db.VarChar(50) @map("entity_type")
  entityId        String?  @map("entity_id")
  oldValue        Json?    @map("old_value")
  newValue        Json?    @map("new_value")
  createdAt       DateTime @default(now()) @map("created_at")

  organization    Organization @relation(fields: [orgId], references: [id])
  user            User?        @relation(fields: [userId], references: [id])

  @@index([orgId])
  @@index([createdAt])
  @@map("customization_audit_log")
}

model UserActivityLog {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  orgId           Int      @map("org_id")
  action          String   @db.VarChar(100)
  entityType      String?  @db.VarChar(50) @map("entity_type")
  entityId        String?  @map("entity_id")
  ipAddress       String?  @map("ip_address")
  userAgent       String?  @map("user_agent")
  metadata        Json?
  createdAt       DateTime @default(now()) @map("created_at")

  user            User     @relation(fields: [userId], references: [id])
  organization    Organization @relation(fields: [orgId], references: [id])

  @@index([userId])
  @@index([orgId])
  @@index([action])
  @@index([createdAt])
  @@map("user_activity_logs")
}

model ItemHistory {
  id              String   @id @default(uuid())
  itemId          String   @map("item_id")
  userId          String   @map("user_id")
  action          String   @db.VarChar(100) // 'created', 'updated', 'borrowed', 'returned', etc.
  changes         Json?    // What changed
  metadata        Json?    // Additional context
  createdAt       DateTime @default(now()) @map("created_at")

  item            Item     @relation(fields: [itemId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@index([itemId])
  @@index([createdAt])
  @@map("item_history")
}

// ==================== SYSTEM OPERATION ENTITIES ====================

model SystemNotification {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  orgId           Int      @map("org_id")
  instanceId      Int?     @map("instance_id")
  type            String   @db.VarChar(50) // 'due_reminder', 'overdue', 'reservation_ready', etc.
  title           String
  message         String   @db.Text
  metadata        Json?    // Additional data (item details, etc.)
  isRead          Boolean  @default(false) @map("is_read")
  readAt          DateTime? @map("read_at")
  createdAt       DateTime @default(now()) @map("created_at")

  user            User     @relation(fields: [userId], references: [id])
  organization    Organization @relation(fields: [orgId], references: [id])
  instance        Instance?    @relation(fields: [instanceId], references: [id])

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("system_notifications")
}

model EmailQueue {
  id              String   @id @default(uuid())
  to              String   @db.VarChar(255)
  subject         String   @db.VarChar(255)
  body            String   @db.Text
  template        String?  @db.VarChar(100)
  templateData    Json?    @map("template_data")
  orgId           Int      @map("org_id")
  instanceId      Int?     @map("instance_id")
  status          EmailStatus @default(PENDING)
  attempts        Int      @default(0)
  sentAt          DateTime? @map("sent_at")
  failedAt        DateTime? @map("failed_at")
  error           String?  @db.Text
  scheduledFor    DateTime @default(now()) @map("scheduled_for")
  createdAt       DateTime @default(now()) @map("created_at")

  organization    Organization @relation(fields: [orgId], references: [id])
  instance        Instance?    @relation(fields: [instanceId], references: [id])

  @@index([status, scheduledFor])
  @@index([orgId])
  @@map("email_queue")
}

model BackgroundJob {
  id              String   @id @default(uuid())
  type            String   @db.VarChar(100) // 'check_overdue', 'expire_reservations', etc.
  payload         Json?
  orgId           Int      @map("org_id")
  status          JobStatus @default(PENDING)
  attempts        Int      @default(0)
  maxAttempts     Int      @default(3) @map("max_attempts")
  scheduledFor    DateTime @map("scheduled_for")
  startedAt       DateTime? @map("started_at")
  completedAt     DateTime? @map("completed_at")
  failedAt        DateTime? @map("failed_at")
  error           String?  @db.Text
  result          Json?
  createdAt       DateTime @default(now()) @map("created_at")

  organization    Organization @relation(fields: [orgId], references: [id])

  @@index([status, scheduledFor])
  @@index([type])
  @@map("background_jobs")
}

model ApprovalWorkflow {
  id              String   @id @default(uuid())
  itemId          String   @map("item_id")
  userId          String   @map("user_id")
  approverId      String?  @map("approver_id")
  orgId           Int      @map("org_id")
  type            String   @db.VarChar(50) // 'lending', 'extension', etc.
  status          ApprovalStatus @default(PENDING)
  requestData     Json     @map("request_data")
  approverNotes   String?  @map("approver_notes")
  approvedAt      DateTime? @map("approved_at")
  rejectedAt      DateTime? @map("rejected_at")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  item            Item     @relation(fields: [itemId], references: [id])
  user            User     @relation("ApprovalRequester", fields: [userId], references: [id])
  approver        User?    @relation("ApprovalApprover", fields: [approverId], references: [id])
  organization    Organization @relation(fields: [orgId], references: [id])

  @@index([status])
  @@index([orgId])
  @@map("approval_workflows")
}

// ==================== FILE STORAGE ENTITIES ====================

model FileMetadata {
  id             String   @id @default(uuid())
  filename       String
  originalName   String   @map("original_name")
  mimeType       String   @map("mime_type")
  size           Int
  bucket         String
  objectName     String   @map("object_name")
  uploadedBy     String   @map("uploaded_by")
  itemId         String?  @map("item_id")
  orgId          Int      @map("org_id")
  instanceId     Int?     @map("instance_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user           User     @relation(fields: [uploadedBy], references: [id])
  item           Item?    @relation(fields: [itemId], references: [id])
  organization   Organization @relation(fields: [orgId], references: [id])
  instance       Instance?    @relation(fields: [instanceId], references: [id])

  @@index([itemId])
  @@index([uploadedBy])
  @@index([orgId, instanceId])
  @@map("file_metadata")
}

model UserFeedback {
  id            String          @id @default(uuid())
  title         String          @db.VarChar(255)
  description   String          @db.Text
  category      String?         @db.VarChar(100) // 'bug', 'feature_request', 'improvement', 'other'
  imageUrls     String[]        @default([]) @map("image_urls") // Array of image file paths
  priority      String          @default("medium") @db.VarChar(50) // 'low', 'medium', 'high', 'critical'
  status        FeedbackStatus  @default(PENDING)
  devResponse   String?         @db.Text @map("dev_response")
  userId        String          @map("user_id")
  orgId         Int             @map("org_id")
  instanceId    Int?            @map("instance_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  reviewedAt    DateTime?       @map("reviewed_at")

  user          User            @relation(fields: [userId], references: [id])
  organization  Organization    @relation(fields: [orgId], references: [id])
  instance      Instance?       @relation(fields: [instanceId], references: [id])

  @@index([userId])
  @@index([orgId, instanceId])
  @@index([status])
  @@index([priority])
  @@index([category])
  @@map("user_feedback")
}

// ==================== ENUMS ====================

enum UserRole {
  ADMIN
  STAFF
  BORROWER
}

enum ReservationStatus {
  ACTIVE
  FULFILLED
  CANCELLED
  EXPIRED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum FeedbackStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  CLOSED
  CANCELLED
}