openapi: 3.0.3
info:
  title: Auth Service API
  version: 1.0.0
  description: |
    Authentication and user management endpoints for the Recursion platform.
    This service issues JWT access tokens and manages refresh tokens.
servers:
  - url: /
    description: Proxied by Vite (dev) or Nginx (prod)
tags:
  - name: Auth
    description: Authentication flows
  - name: Users
    description: Basic user queries (admin)
paths:
  /health:
    get:
      tags: [Auth]
      summary: Health check
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: auth

  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registered and logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '409': { $ref: '#/components/responses/Conflict' }

  /auth/login:
    post:
      tags: [Auth]
      summary: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: New tokens issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user profile
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout and revoke refresh tokens
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Request a password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: A generic response to avoid email enumeration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/reset-password:
    post:
      tags: [Auth]
      summary: Reset password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password updated
        '400': { $ref: '#/components/responses/BadRequest' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    UserPublic:
      type: object
      properties:
        id:
          type: string
          example: "clx123abc"
        email:
          type: string
          format: email
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        role:
          type: string
          enum: [ADMIN, STAFF, BORROWER]
        orgId:
          type: integer
        instanceId:
          type: integer
          nullable: true

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserPublic'
        accessToken:
          type: string
        refreshToken:
          type: string

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    RegisterRequest:
      type: object
      required: [email, password, orgId]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [ADMIN, STAFF, BORROWER]
        orgId:
          type: integer
        instanceId:
          type: integer

    RefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string

    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required: [token, newPassword]
      properties:
        token:
          type: string
        newPassword:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string

