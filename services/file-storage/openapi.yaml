openapi: 3.0.3
info:
  title: File Storage Service API
  version: 1.0.0
  description: |
    File management service for the Recursion platform handling uploads,
    downloads, and file metadata. Supports both single and bulk file uploads
    with pre-signed URL generation for secure downloads.
servers:
  - url: /
    description: Proxied by Vite (dev) or Nginx (prod)
tags:
  - name: Health
    description: Service health monitoring
  - name: Files
    description: File upload, download, and management operations
paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: file-storage
                  timestamp:
                    type: string
                    format: date-time

  /files:
    get:
      tags: [Files]
      summary: List files
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: itemId
          schema: { type: string }
        - in: query
          name: uploadedBy
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        '200':
          description: Paginated files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFiles'
        '401': { $ref: '#/components/responses/Unauthorized' }

  /files/upload:
    post:
      tags: [Files]
      summary: Upload a single file
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                itemId:
                  type: string
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /files/bulk-upload:
    post:
      tags: [Files]
      summary: Upload multiple files
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                itemId:
                  type: string
      responses:
        '201':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
                  count:
                    type: integer
                    example: 3
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /files/{id}:
    get:
      tags: [Files]
      summary: Get file metadata
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: File metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [Files]
      summary: Delete a file
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: File deleted successfully
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  /files/{id}/download:
    get:
      tags: [Files]
      summary: Get a pre-signed download URL
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Download info
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: "https://storage.example.com/files/abc123?token=xyz"
                  expiresAt:
                    type: string
                    format: date-time
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
    File:
      type: object
      properties:
        id:
          type: string
          example: "clx789abc"
        itemId:
          type: string
          nullable: true
        originalName:
          type: string
          example: "document.pdf"
        mimeType:
          type: string
          example: "application/pdf"
        size:
          type: integer
          example: 2048576
        uploadedBy:
          type: string
          example: "clx123user"
        createdAt:
          type: string
          format: date-time
    PaginatedFiles:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/File'
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 42

