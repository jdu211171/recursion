openapi: 3.0.3
info:
  title: Business Logic Service API
  version: 1.0.0
  description: |
    Core business logic for the Recursion platform including inventory management,
    lending operations, reservations, and organizational configurations.
    This service handles all item-related operations and borrowing workflows.
servers:
  - url: /
    description: Proxied by Vite (dev) or Nginx (prod)
tags:
  - name: Health
    description: Service health monitoring
  - name: Items
    description: Inventory item management
  - name: Lending
    description: Item checkout and return operations
  - name: Reservations
    description: Item reservation management
  - name: Organizations
    description: Organization queries and management
  - name: Configurations
    description: System configuration endpoints
paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: business-logic
                  timestamp:
                    type: string
                    format: date-time

  /items:
    get:
      tags: [Items]
      summary: List items
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: categoryId
          schema: { type: string }
        - in: query
          name: isAvailable
          schema: { type: boolean }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        '200':
          description: Paginated items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedItems'
        '401': { $ref: '#/components/responses/Unauthorized' }
    post:
      tags: [Items]
      summary: Create item
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '201':
          description: Created item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /items/{id}:
    get:
      tags: [Items]
      summary: Get item by ID
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Items]
      summary: Update item
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ItemInput' }
      responses:
        '200':
          description: Updated item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [Items]
      summary: Delete item
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /lending:
    get:
      tags: [Lending]
      summary: Get lending history
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: userId
          schema: { type: string }
        - in: query
          name: itemId
          schema: { type: string }
        - in: query
          name: isActive
          schema: { type: boolean }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        '200':
          description: Paginated lending entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLending'
        '401': { $ref: '#/components/responses/Unauthorized' }

  /lending/checkout:
    post:
      tags: [Lending]
      summary: Checkout an item
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
      responses:
        '201':
          description: Checkout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lending'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409': { $ref: '#/components/responses/Conflict' }

  /lending/{id}/return:
    post:
      tags: [Lending]
      summary: Return an item
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Item returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lending'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /reservations:
    get:
      tags: [Reservations]
      summary: List reservations
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: userId
          schema: { type: string }
        - in: query
          name: itemId
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        '200':
          description: Paginated reservations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReservations'
        '401': { $ref: '#/components/responses/Unauthorized' }
    post:
      tags: [Reservations]
      summary: Create reservation
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationInput'
      responses:
        '201':
          description: Reservation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409': { $ref: '#/components/responses/Conflict' }

  /reservations/{id}/cancel:
    post:
      tags: [Reservations]
      summary: Cancel reservation
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Reservation cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reservation cancelled successfully
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /reservations/item/{itemId}/availability:
    get:
      tags: [Reservations]
      summary: Check item availability at date
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: itemId
          required: true
          schema: { type: string }
        - in: query
          name: date
          required: true
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: Availability
          content:
            application/json:
              schema:
                type: object
                properties:
                  itemId:
                    type: string
                  date:
                    type: string
                    format: date-time
                  isAvailable:
                    type: boolean
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /organizations/my:
    get:
      tags: [Organizations]
      summary: Get current user's organization
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: User's organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
    Item:
      type: object
      properties:
        id:
          type: string
          example: "clx123abc"
        name:
          type: string
          example: "Programming Book"
        description:
          type: string
          nullable: true
        categoryId:
          type: string
          nullable: true
        isAvailable:
          type: boolean
          example: true
    ItemInput:
      type: object
      required: [name]
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        categoryId:
          type: string
          nullable: true
        isAvailable:
          type: boolean
          default: true
    PaginatedItems:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
    Lending:
      type: object
      properties:
        id:
          type: string
          example: "clx456def"
        itemId:
          type: string
        borrowerId:
          type: string
        dueDate:
          type: string
          format: date-time
        returnedAt:
          type: string
          format: date-time
          nullable: true
    PaginatedLending:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Lending'
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 50
    CheckoutRequest:
      type: object
      required: [itemId, borrowerId, dueDate]
      properties:
        itemId:
          type: string
        borrowerId:
          type: string
        dueDate:
          type: string
          format: date-time
        notes:
          type: string
          nullable: true
    ReservationInput:
      type: object
      required: [itemId, reservedFor]
      properties:
        itemId:
          type: string
        userId:
          type: string
        reservedFor:
          type: string
          format: date-time
        notes:
          type: string
          nullable: true

    Reservation:
      type: object
      properties:
        id:
          type: string
          example: "clx789ghi"
        itemId:
          type: string
        userId:
          type: string
        reservedFor:
          type: string
          format: date-time
        status:
          type: string
          enum: [ACTIVE, CANCELLED, COMPLETED]
        notes:
          type: string
          nullable: true

    PaginatedReservations:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 30

    Organization:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Main Library"
        type:
          type: string
          enum: [LIBRARY, SCHOOL, COMPANY]
        settings:
          type: object
          nullable: true

