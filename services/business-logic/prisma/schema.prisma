generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                Int                     @id @default(autoincrement())
  name              String                  @db.VarChar(255)
  createdAt         DateTime                @default(now()) @map("created_at")
  updatedAt         DateTime                @default(now()) @map("updated_at")
  configVersion     Int?                    @default(1) @map("config_version")
  deploymentType    String?                 @default("shared") @map("deployment_type") @db.VarChar(50)
  apiKeys           ApiKey[]
  approvalWorkflows ApprovalWorkflow[]
  blacklists        Blacklist[]
  categories        Category[]
  customFields      CustomFieldDefinition[]
  auditLogs         CustomizationAuditLog[]
  files             FileMetadata[]
  instances         Instance[]
  items             Item[]
  lendingPolicies   LendingPolicy[]
  lendings          Lending[]
  configurations    OrgConfiguration[]
  reservations      Reservation[]
  notifications     SystemNotification[]
  userActivityLogs  UserActivityLog[]
  feedback          UserFeedback[]
  users             User[]

  @@map("organizations")
}

model Instance {
  id              Int                  @id @default(autoincrement())
  name            String               @db.VarChar(255)
  orgId           Int                  @map("org_id")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @default(now()) @map("updated_at")
  blacklists      Blacklist[]
  categories      Category[]
  files           FileMetadata[]
  organization    Organization         @relation(fields: [orgId], references: [id])
  items           Item[]
  lendingPolicies LendingPolicy[]
  lendings        Lending[]
  configurations  OrgConfiguration[]
  reservations    Reservation[]
  notifications   SystemNotification[]
  users           User[]

  @@index([orgId])
  @@index([orgId], map: "idx_instances_org_id")
  @@map("instances")
}

model User {
  id                        String                  @id @default(uuid())
  email                     String                  @unique
  password                  String
  firstName                 String?                 @map("first_name")
  lastName                  String?                 @map("last_name")
  contactInfo               String?                 @map("contact_info")
  role                      UserRole                @default(BORROWER)
  orgId                     Int                     @map("org_id")
  instanceId                Int?                    @map("instance_id")
  isActive                  Boolean                 @default(true) @map("is_active")
  lastLoginAt               DateTime?               @map("last_login_at")
  createdAt                 DateTime                @default(now()) @map("created_at")
  updatedAt                 DateTime                @updatedAt @map("updated_at")
  apiKeys                   ApiKey[]
  approvalRequestsToReview  ApprovalWorkflow[]      @relation("ApprovalApprover")
  approvalRequestsSubmitted ApprovalWorkflow[]      @relation("ApprovalRequester")
  blacklists                Blacklist[]
  auditLogs                 CustomizationAuditLog[]
  files                     FileMetadata[]
  itemHistories             ItemHistory[]
  lendings                  Lending[]
  passwordResets            PasswordResetToken[]
  refreshTokens             RefreshToken[]
  reservations              Reservation[]
  notifications             SystemNotification[]
  activityLogs              UserActivityLog[]
  feedback                  UserFeedback[]
  preferences               UserPreference?
  sessions                  UserSession[]
  instance                  Instance?               @relation(fields: [instanceId], references: [id])
  organization              Organization            @relation(fields: [orgId], references: [id])

  @@index([email])
  @@index([orgId, instanceId])
  @@index([email], map: "idx_users_email")
  @@index([orgId, instanceId], map: "idx_users_org_instance")
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([token], map: "idx_refresh_tokens_token")
  @@index([userId], map: "idx_refresh_tokens_user_id")
  @@map("refresh_tokens")
}

model UserSession {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?   @map("user_id")
  token     String    @unique @db.VarChar(255)
  ipAddress String?   @map("ip_address") @db.VarChar(45)
  userAgent String?   @map("user_agent")
  expiresAt DateTime  @map("expires_at") @db.Timestamp(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expiresAt], map: "idx_user_sessions_expires_at")
  @@index([token], map: "idx_user_sessions_token")
  @@index([userId], map: "idx_user_sessions_user_id")
  @@map("user_sessions")
}

model PasswordResetToken {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?   @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at") @db.Timestamp(6)
  usedAt    DateTime? @map("used_at") @db.Timestamp(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_password_reset_tokens_token")
  @@index([userId], map: "idx_password_reset_tokens_user_id")
  @@map("password_reset_tokens")
}

model UserPreference {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String?   @unique @map("user_id")
  emailNotifications Boolean?  @default(true) @map("email_notifications")
  smsNotifications   Boolean?  @default(false) @map("sms_notifications")
  theme              String?   @default("light") @db.VarChar(50)
  language           String?   @default("en") @db.VarChar(10)
  timezone           String?   @default("UTC") @db.VarChar(50)
  metadata           Json?
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user               User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_preferences")
}

model ApiKey {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String        @db.VarChar(255)
  key          String        @unique @db.VarChar(255)
  userId       String?       @map("user_id")
  orgId        Int?          @map("org_id")
  permissions  Json?
  expiresAt    DateTime?     @map("expires_at") @db.Timestamp(6)
  lastUsedAt   DateTime?     @map("last_used_at") @db.Timestamp(6)
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([key], map: "idx_api_keys_key")
  @@index([userId], map: "idx_api_keys_user_id")
  @@map("api_keys")
}

model Category {
  id           String       @id @default(uuid())
  name         String
  description  String?
  orgId        Int          @map("org_id")
  instanceId   Int?         @map("instance_id")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  instance     Instance?    @relation(fields: [instanceId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])
  items        Item[]

  @@unique([name, orgId, instanceId])
  @@index([orgId, instanceId])
  @@index([orgId, instanceId], map: "idx_categories_org_instance")
  @@map("categories")
}

model Item {
  id                String             @id @default(uuid())
  uniqueId          String             @unique @map("unique_id")
  name              String
  description       String?
  categoryId        String?            @map("category_id")
  orgId             Int                @map("org_id")
  instanceId        Int?               @map("instance_id")
  totalCount        Int                @default(1) @map("total_count")
  availableCount    Int                @default(1) @map("available_count")
  metadata          Json?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  approvalWorkflows ApprovalWorkflow[]
  files             FileMetadata[]
  histories         ItemHistory[]
  category          Category?          @relation(fields: [categoryId], references: [id])
  instance          Instance?          @relation(fields: [instanceId], references: [id])
  organization      Organization       @relation(fields: [orgId], references: [id])
  lendings          Lending[]
  reservations      Reservation[]

  @@index([orgId, instanceId])
  @@index([categoryId])
  @@index([uniqueId])
  @@index([orgId, instanceId, availableCount])
  @@index([categoryId], map: "idx_items_category_id")
  @@index([orgId, instanceId], map: "idx_items_org_instance")
  @@index([uniqueId], map: "idx_items_unique_id")
  @@map("items")
}

model Lending {
  id              String       @id @default(uuid())
  itemId          String       @map("item_id")
  userId          String       @map("user_id")
  orgId           Int          @map("org_id")
  instanceId      Int?         @map("instance_id")
  borrowedAt      DateTime     @default(now()) @map("borrowed_at")
  dueDate         DateTime     @map("due_date")
  returnedAt      DateTime?    @map("returned_at")
  penalty         Float?       @default(0)
  penaltyReason   String?      @map("penalty_reason")
  penaltyOverride Boolean      @default(false) @map("penalty_override")
  notes           String?
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  metadata        Json?
  instance        Instance?    @relation(fields: [instanceId], references: [id])
  item            Item         @relation(fields: [itemId], references: [id])
  organization    Organization @relation(fields: [orgId], references: [id])
  user            User         @relation(fields: [userId], references: [id])

  @@index([itemId])
  @@index([userId])
  @@index([orgId, instanceId])
  @@index([returnedAt])
  @@index([itemId], map: "idx_lendings_item_id")
  @@index([orgId, instanceId], map: "idx_lendings_org_instance")
  @@index([returnedAt], map: "idx_lendings_returned_at")
  @@index([userId], map: "idx_lendings_user_id")
  @@map("lendings")
}

model Reservation {
  id           String            @id @default(uuid())
  itemId       String            @map("item_id")
  userId       String            @map("user_id")
  orgId        Int               @map("org_id")
  instanceId   Int?              @map("instance_id")
  reservedFor  DateTime          @map("reserved_for")
  expiresAt    DateTime          @map("expires_at")
  status       ReservationStatus @default(ACTIVE)
  fulfilledAt  DateTime?         @map("fulfilled_at")
  cancelledAt  DateTime?         @map("cancelled_at")
  notes        String?
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  metadata     Json?
  instance     Instance?         @relation(fields: [instanceId], references: [id])
  item         Item              @relation(fields: [itemId], references: [id])
  organization Organization      @relation(fields: [orgId], references: [id])
  user         User              @relation(fields: [userId], references: [id])

  @@index([itemId])
  @@index([userId])
  @@index([orgId, instanceId])
  @@index([status])
  @@index([reservedFor])
  @@index([itemId], map: "idx_reservations_item_id")
  @@index([orgId, instanceId], map: "idx_reservations_org_instance")
  @@index([reservedFor], map: "idx_reservations_reserved_for")
  @@index([status], map: "idx_reservations_status")
  @@index([userId], map: "idx_reservations_user_id")
  @@map("reservations")
}

model Blacklist {
  id           String       @id @default(uuid())
  userId       String       @map("user_id")
  orgId        Int          @map("org_id")
  instanceId   Int?         @map("instance_id")
  reason       String
  blockedUntil DateTime     @map("blocked_until")
  isActive     Boolean      @default(true) @map("is_active")
  overriddenBy String?      @map("overridden_by")
  overriddenAt DateTime?    @map("overridden_at")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  instance     Instance?    @relation(fields: [instanceId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([userId, orgId, instanceId])
  @@index([blockedUntil])
  @@index([isActive])
  @@index([blockedUntil], map: "idx_blacklists_blocked_until")
  @@index([isActive], map: "idx_blacklists_is_active")
  @@index([userId, orgId, instanceId], map: "idx_blacklists_user_org_instance")
  @@map("blacklists")
}

model OrgConfiguration {
  id                       String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orgId                    Int?          @map("org_id")
  instanceId               Int?          @map("instance_id")
  maxLendingDays           Int?          @default(7) @map("max_lending_days")
  latePenaltyPerDay        Decimal?      @default(1.00) @map("late_penalty_per_day") @db.Decimal(10, 2)
  maxItemsPerUser          Int?          @default(5) @map("max_items_per_user")
  requireApproval          Boolean?      @default(false) @map("require_approval")
  allowExtensions          Boolean?      @default(true) @map("allow_extensions")
  maxExtensions            Int?          @default(2) @map("max_extensions")
  autoBlacklist            Boolean?      @default(true) @map("auto_blacklist")
  blacklistThresholdFirst  Int?          @default(3) @map("blacklist_threshold_first")
  blacklistThresholdSecond Int?          @default(7) @map("blacklist_threshold_second")
  blacklistThresholdThird  Int?          @default(30) @map("blacklist_threshold_third")
  themeConfig              Json?         @default("{}") @map("theme_config")
  enabledFeatures          Json?         @default("[]") @map("enabled_features")
  customFields             Json?         @default("{}") @map("custom_fields")
  emailTemplates           Json?         @default("{}") @map("email_templates")
  createdAt                DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  instance                 Instance?     @relation(fields: [instanceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization             Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([orgId, instanceId])
  @@index([orgId, instanceId], map: "idx_org_configurations_org_instance")
  @@map("org_configurations")
}

model FeatureFlag {
  id             String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String     @unique @db.VarChar(100)
  description    String?
  defaultEnabled Boolean?   @default(false) @map("default_enabled")
  requiresRole   UserRole? @map("requires_role")
  createdAt      DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)

  @@map("feature_flags")
}

model CustomFieldDefinition {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orgId        Int?          @map("org_id")
  entityType   String        @map("entity_type") @db.VarChar(50)
  fieldName    String        @map("field_name") @db.VarChar(100)
  fieldType    String        @map("field_type") @db.VarChar(50)
  fieldConfig  Json          @map("field_config")
  isRequired   Boolean?      @default(false) @map("is_required")
  displayOrder Int?          @default(0) @map("display_order")
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([orgId, entityType, fieldName])
  @@index([orgId, entityType], map: "idx_custom_field_definitions_org_entity")
  @@map("custom_field_definitions")
}

model LendingPolicy {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orgId               Int?          @map("org_id")
  instanceId          Int?          @map("instance_id")
  max_lending_days    Int?          @default(14)
  max_renewals        Int?          @default(2)
  late_fee_per_day    Decimal?      @default(0.50) @db.Decimal(10, 2)
  max_items_per_user  Int?          @default(5)
  auto_blacklist_days Int?          @default(30)
  metadata            Json?
  createdAt           DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  name                String?       @db.VarChar(255)
  description         String?
  itemCategory        String?       @map("item_category") @db.VarChar(255)
  userRole            UserRole?     @map("user_role")
  requiresApproval    Boolean?      @default(false) @map("requires_approval")
  penaltyRules        Json?         @map("penalty_rules")
  priority            Int?          @default(0)
  isActive            Boolean?      @default(true) @map("is_active")
  instance            Instance?     @relation(fields: [instanceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization        Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([orgId, instanceId], map: "idx_lending_policies_org_instance")
  @@index([priority], map: "idx_lending_policies_priority")
  @@map("lending_policies")
}

model CustomizationAuditLog {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orgId        Int?          @map("org_id")
  userId       String?       @map("user_id")
  action       String        @db.VarChar(100)
  entityType   String        @map("entity_type") @db.VarChar(50)
  entityId     String?       @map("entity_id")
  oldValue     Json?         @map("old_value")
  newValue     Json?         @map("new_value")
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User?         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([createdAt], map: "idx_customization_audit_log_created")
  @@index([orgId], map: "idx_customization_audit_log_org")
  @@map("customization_audit_log")
}

model UserActivityLog {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String?       @map("user_id")
  action       String        @db.VarChar(100)
  entityType   String?       @map("entity_type") @db.VarChar(50)
  entityId     String?       @map("entity_id")
  ipAddress    String?       @map("ip_address") @db.VarChar(45)
  metadata     Json?
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  orgId        Int?          @map("org_id")
  userAgent    String?       @map("user_agent")
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User?         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([createdAt], map: "idx_user_activity_logs_created_at")
  @@index([userId], map: "idx_user_activity_logs_user_id")
  @@map("user_activity_logs")
}

model ItemHistory {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId    String?   @map("item_id")
  userId    String?   @map("user_id")
  action    String    @db.VarChar(100)
  metadata  Json?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  item      Item?     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User?     @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([createdAt], map: "idx_item_history_created_at")
  @@index([itemId], map: "idx_item_history_item_id")
  @@map("item_history")
}

model SystemNotification {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String?       @map("user_id")
  type         String        @db.VarChar(50)
  title        String        @db.VarChar(255)
  message      String
  metadata     Json?
  isRead       Boolean?      @default(false) @map("is_read")
  readAt       DateTime?     @map("read_at") @db.Timestamp(6)
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  orgId        Int?          @map("org_id")
  instanceId   Int?          @map("instance_id")
  instance     Instance?     @relation(fields: [instanceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([createdAt], map: "idx_system_notifications_created_at")
  @@index([userId, isRead], map: "idx_system_notifications_user_read")
  @@map("system_notifications")
}

model EmailQueue {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  to_address    String    @db.VarChar(255)
  subject       String    @db.VarChar(255)
  body          String
  template      String?   @db.VarChar(100)
  metadata      Json?
  status        String?   @default("pending") @db.VarChar(50)
  attempts      Int?      @default(0)
  scheduled_at  DateTime? @default(now()) @db.Timestamp(6)
  sentAt        DateTime? @map("sent_at") @db.Timestamp(6)
  error_message String?
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  @@index([status, scheduled_at], map: "idx_email_queue_status_scheduled")
  @@map("email_queue")
}

model BackgroundJob {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          String    @db.VarChar(100)
  payload       Json?
  status        String?   @default("pending") @db.VarChar(50)
  attempts      Int?      @default(0)
  scheduled_at  DateTime? @default(now()) @db.Timestamp(6)
  startedAt     DateTime? @map("started_at") @db.Timestamp(6)
  completedAt   DateTime? @map("completed_at") @db.Timestamp(6)
  error_message String?
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  @@index([status, scheduled_at], map: "idx_background_jobs_status_scheduled")
  @@map("background_jobs")
}

model ApprovalWorkflow {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId       String?       @map("item_id")
  userId       String?       @map("user_id")
  approverId   String?       @map("approver_id")
  orgId        Int?          @map("org_id")
  status       String?       @default("pending") @db.VarChar(50)
  notes        String?
  approvedAt   DateTime?     @map("approved_at") @db.Timestamp(6)
  rejectedAt   DateTime?     @map("rejected_at") @db.Timestamp(6)
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  approver     User?         @relation("ApprovalApprover", fields: [approverId], references: [id], onUpdate: NoAction)
  item         Item?         @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User?         @relation("ApprovalRequester", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([orgId], map: "idx_approval_workflows_org_id")
  @@index([status], map: "idx_approval_workflows_status")
  @@map("approval_workflows")
}

model FileMetadata {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filename     String        @db.VarChar(255)
  originalName String        @map("original_name") @db.VarChar(255)
  mimeType     String        @map("mime_type") @db.VarChar(255)
  size         Int
  bucket       String        @db.VarChar(255)
  objectName   String        @map("object_name") @db.VarChar(255)
  uploadedBy   String?       @map("uploaded_by")
  itemId       String?       @map("item_id")
  orgId        Int?          @map("org_id")
  instanceId   Int?          @map("instance_id")
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  instance     Instance?     @relation(fields: [instanceId], references: [id], onUpdate: NoAction)
  item         Item?         @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User?         @relation(fields: [uploadedBy], references: [id], onUpdate: NoAction)

  @@index([createdAt(sort: Desc)], map: "idx_file_metadata_created")
  @@index([itemId], map: "idx_file_metadata_item")
  @@index([orgId, instanceId], map: "idx_file_metadata_org")
  @@index([uploadedBy], map: "idx_file_metadata_user")
  @@map("file_metadata")
}

model UserFeedback {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String?       @map("user_id")
  orgId        Int?          @map("org_id")
  type         String        @db.VarChar(50)
  category     String        @db.VarChar(50)
  priority     String?       @default("medium") @db.VarChar(20)
  subject      String        @db.VarChar(255)
  description  String
  image_url    String?
  status       String?       @default("open") @db.VarChar(50)
  admin_notes  String?
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User?         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([createdAt], map: "idx_user_feedback_created_at")
  @@index([orgId, status], map: "idx_user_feedback_org_status")
  @@map("user_feedback")
}

enum UserRole {
  ADMIN
  STAFF
  BORROWER
  
  @@map("user_role")
}

enum ReservationStatus {
  ACTIVE
  FULFILLED
  CANCELLED
  EXPIRED
  
  @@map("reservation_status")
}
